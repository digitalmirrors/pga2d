;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name pga2d.grassmann, :imports nil, :requires nil, :uses nil, :defs {chop-vector {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 152, :column 7, :end-line 152, :end-column 18, :arglists (quote ([v tol]))}, :name pga2d.grassmann/chop-vector, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 18, :method-params ([v tol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v tol]))}, add {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 131, :column 7, :end-line 131, :end-column 10, :arglists (quote ([{[a] :0, lineA :1, pointA :2, [A] :3} {[b] :0, lineB :1, pointB :2, [B] :3}]))}, :name pga2d.grassmann/add, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 10, :method-params ([p__5834 p__5835]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{[a] :0, lineA :1, pointA :2, [A] :3} {[b] :0, lineB :1, pointB :2, [B] :3}]))}, join {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 127, :column 7, :end-line 127, :end-column 11, :arglists (quote ([mv1 mv2]))}, :name pga2d.grassmann/join, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 11, :method-params ([mv1 mv2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mv1 mv2]))}, point? {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 88, :column 7, :end-line 88, :end-column 13, :arglists (quote ([mv]))}, :name pga2d.grassmann/point?, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 13, :method-params ([mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mv]))}, scalar-from {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 67, :column 7, :end-line 67, :end-column 18, :arglists (quote ([mv]))}, :name pga2d.grassmann/scalar-from, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 18, :method-params ([mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mv]))}, smultiplier {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 139, :column 7, :end-line 139, :end-column 18, :arglists (quote ([s]))}, :name pga2d.grassmann/smultiplier, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, line? {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 85, :column 7, :end-line 85, :end-column 12, :arglists (quote ([mv]))}, :name pga2d.grassmann/line?, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 12, :method-params ([mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mv]))}, ga-reverse {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 149, :column 7, :end-line 149, :end-column 17, :arglists (quote ([{[s] :0, [c a b] :1, [z x y] :2, [p] :3}]))}, :name pga2d.grassmann/ga-reverse, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 17, :method-params ([p__5853]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{[s] :0, [c a b] :1, [z x y] :2, [p] :3}]))}, multivector {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 38, :column 7, :end-line 38, :end-column 18, :arglists (quote ([s [a b c] [x y z] p]))}, :name pga2d.grassmann/multivector, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 18, :method-params ([s p__5791 p__5792 p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 4, :fn-var true, :arglists (quote ([s [a b c] [x y z] p]))}, pseudoscalar {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 62, :column 7, :end-line 62, :end-column 19, :arglists (quote ([p]))}, :name pga2d.grassmann/pseudoscalar, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, dual {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 123, :column 7, :end-line 123, :end-column 11, :arglists (quote ([mv]))}, :name pga2d.grassmann/dual, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 11, :method-params ([mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mv]))}, wedge {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 99, :column 7, :end-line 99, :end-column 12, :arglists (quote ([{[a] :0, [a0 a1 a2] :1, [A0 A1 A2] :2, [A] :3} {[b] :0, [b0 b1 b2] :1, [B0 B1 B2] :2, [B] :3}]))}, :name pga2d.grassmann/wedge, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 12, :method-params ([p__5808 p__5809]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{[a] :0, [a0 a1 a2] :1, [A0 A1 A2] :2, [A] :3} {[b] :0, [b0 b1 b2] :1, [B0 B1 B2] :2, [B] :3}]))}, times {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 143, :column 7, :end-line 143, :end-column 12, :arglists (quote ([mv s]))}, :name pga2d.grassmann/times, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 12, :method-params ([mv s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mv s]))}, gradekeys {:name pga2d.grassmann/gradekeys, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 16, :column 1, :end-line 16, :end-column 15, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 16, :column 6, :end-line 16, :end-column 15}}, chop {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 157, :column 7, :end-line 157, :end-column 11, :arglists (quote ([mv tol]))}, :name pga2d.grassmann/chop, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 11, :method-params ([mv tol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mv tol]))}, multivector_native {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 19, :column 7, :end-line 19, :end-column 25, :arglists (quote ([[s] [a b c] [x y z] [p]]))}, :name pga2d.grassmann/multivector_native, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 25, :method-params ([p__5779 p__5780 p__5781 p__5782]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 4, :fn-var true, :arglists (quote ([[s] [a b c] [x y z] [p]]))}, point-from {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 77, :column 7, :end-line 77, :end-column 17, :arglists (quote ([mv]))}, :name pga2d.grassmann/point-from, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 17, :method-params ([mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mv]))}, gradesAreZero {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 9, :column 7, :end-line 9, :end-column 20, :arglists (quote ([mv]))}, :name pga2d.grassmann/gradesAreZero, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 20, :method-params ([mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mv]))}, pseudoscalar-from {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 70, :column 7, :end-line 70, :end-column 24, :arglists (quote ([mv]))}, :name pga2d.grassmann/pseudoscalar-from, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 24, :method-params ([mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mv]))}, pseudoscalar? {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 91, :column 7, :end-line 91, :end-column 20, :arglists (quote ([mv]))}, :name pga2d.grassmann/pseudoscalar?, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 20, :method-params ([mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mv]))}, zeros? {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 6, :column 7, :end-line 6, :end-column 13, :arglists (quote ([a]))}, :name pga2d.grassmann/zeros?, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 13, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a]))}, line-from {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 73, :column 7, :end-line 73, :end-column 16, :arglists (quote ([mv]))}, :name pga2d.grassmann/line-from, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 16, :method-params ([mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mv]))}, grade {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 41, :column 7, :end-line 41, :end-column 12, :arglists (quote ([mv grade]))}, :name pga2d.grassmann/grade, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 12, :method-params ([mv grade]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mv grade]))}, scalar {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 59, :column 7, :end-line 59, :end-column 13, :arglists (quote ([s]))}, :name pga2d.grassmann/scalar, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, line {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 56, :column 7, :end-line 56, :end-column 11, :arglists (quote ([a b c]))}, :name pga2d.grassmann/line, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 11, :method-params ([a b c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a b c]))}, scalar? {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 82, :column 7, :end-line 82, :end-column 14, :arglists (quote ([mv]))}, :name pga2d.grassmann/scalar?, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 14, :method-params ([mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mv]))}, even-subalg {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 94, :column 7, :end-line 94, :end-column 18, :arglists (quote ([mv]))}, :name pga2d.grassmann/even-subalg, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 18, :method-params ([mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mv]))}, point {:protocol-inline nil, :meta {:file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :line 51, :column 7, :end-line 51, :end-column 12, :arglists (quote ([v] [x y z])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [x y z]), :arglists ([v] [x y z]), :arglists-meta (nil nil)}}, :name pga2d.grassmann/point, :variadic false, :file "/Users/gunn/Software/CLJS/pga2d/src/pga2d/grassmann.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([v] [x y z]), :arglists ([v] [x y z]), :arglists-meta (nil nil)}, :method-params ([v] [x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 3, :fn-var true, :arglists ([v] [x y z])}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:rotor? :0 :k :gradesAreZero :1 :2 :3 :kvector?}, :order [:0 :1 :2 :3 :gradesAreZero :kvector? :rotor? :k]}, :doc nil}